name: Merge to Main

on:
  push:
    branches:
      - main
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/*"
      - "**.md"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  codeql:
    name: Semantic Code Analysis
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v3

      - name: Initialize
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  deploys-test:
    name: TEST Deployments
    needs:
      - codeql
    environment: test
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        name: [backend, database, frontend, init, backend-java, backend-py]
        include:
          - name: backend
            file: backend/openshift.deploy.yml
            parameters: -p PROMOTE_MIGRATION=${{ github.repository }}/database-migrations:test
            overwrite: true
          - name: database
            file: database/openshift.deploy.yml
            overwrite: false
          - name: frontend
            file: frontend/openshift.deploy.yml
            overwrite: true
          - name: init
            file: common/openshift.init.yml
            overwrite: false
          - name: backend-py
            file: backend-python/openshift.deploy.yml
            overwrite: true
            parameters:
              -p MIN_REPLICAS=1 -p MAX_REPLICAS=2
              -p PROMOTE_MIGRATION=${{ github.repository }}/database-migrations-py:test
          - name: backend-java
            file: backend-java/openshift.deploy.yml
            overwrite: true
            parameters:
              -p MIN_REPLICAS=1 -p MAX_REPLICAS=2
    steps:
      - uses: bcgov-nr/action-deployer-openshift@v1.3.0
        with:
          file: ${{ matrix.file }}
          oc_namespace: ${{ vars.OC_NAMESPACE }}
          oc_server: ${{ vars.OC_SERVER }}
          oc_token: ${{ secrets.OC_TOKEN }}
          overwrite: ${{ matrix.overwrite }}
          parameters:
            -p ZONE=test -p PROMOTE=${{ github.repository }}/${{ matrix.name }}:test
            -p NAME=${{ github.event.repository.name }} ${{ matrix.parameters }}
          penetration_test: true

  deploys-prod:
    name: PROD Deployments
    needs:
      - deploys-test
    environment: prod
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        name: [backend, database, frontend, init, backend-py,  backend-java]
        include:
          - name: backend
            file: backend/openshift.deploy.yml
            parameters: -p PROMOTE_MIGRATION=${{ github.repository }}/database-migrations:test
            overwrite: true
          - name: database
            file: database/openshift.deploy.yml
            overwrite: false
          - name: frontend
            file: frontend/openshift.deploy.yml
            overwrite: true
          - name: init
            file: common/openshift.init.yml
            overwrite: false
          - name: backend-py
            file: backend-python/openshift.deploy.yml
            overwrite: true
            parameters:
              -p MIN_REPLICAS=1 -p MAX_REPLICAS=2
              -p PROMOTE_MIGRATION=${{ github.repository }}/database-migrations-py:test
          - name: backend-java
            file: backend-java/openshift.deploy.yml
            overwrite: true
            parameters:
              -p MIN_REPLICAS=1 -p MAX_REPLICAS=2
    steps:
      - uses: bcgov-nr/action-deployer-openshift@v1.3.0
        with:
          file: ${{ matrix.file }}
          oc_namespace: ${{ vars.OC_NAMESPACE }}
          oc_server: ${{ vars.OC_SERVER }}
          oc_token: ${{ secrets.OC_TOKEN }}
          overwrite: ${{ matrix.overwrite }}
          parameters:
            -p ZONE=prod -p PROMOTE=${{ github.repository }}/${{ matrix.name }}:test
            -p NAME=${{ github.event.repository.name }} ${{ matrix.parameters }}
          penetration_test: false

  image-promotions:
    name: Promote images to PROD
    needs:
      - deploys-prod
    runs-on: ubuntu-22.04
    permissions:
      packages: write
    strategy:
      matrix:
        component: [backend, database,database-migrations, frontend, database-migrations-py, backend-py, backend-java]
    steps:
      - uses: shrink/actions-docker-registry-tag@v3
        with:
          registry: ghcr.io
          repository: ${{ github.repository }}/${{ matrix.component }}
          target: test
          tags: prod


  generate_schema_spy:
    name: Generate SchemaSpy Documentation
    runs-on: ubuntu-22.04

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: default
          POSTGRES_USER: default
          POSTGRES_PASSWORD: default
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - uses: joshuaavalon/flyway-action@v3.0.0
        name: generate schemaspy documentation for node/nest js backend
        with:
          url: jdbc:postgresql://postgres:5432/default
          user: default
          password: default
        env:
          FLYWAY_VALIDATE_MIGRATION_NAMING: true
          FLYWAY_LOCATIONS: filesystem:./backend/db/migrations
          FLYWAY_DEFAULT_SCHEMA: "users"
      - name: Create Output Folder
        run: |
          mkdir output
          chmod a+rwx -R output
      - name: Run Schemaspy
        run: docker run --network host -v "$PWD/output:/output" schemaspy/schemaspy:snapshot -t pgsql -db default -host 127.0.0.1 -port 5432 -u default -p default -schemas users
      - name: Deploy to Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: output
          target-folder: schemaspy
